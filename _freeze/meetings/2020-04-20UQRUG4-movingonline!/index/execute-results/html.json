{
  "hash": "914e85cba746d10d19b05b3c15f6e8fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: UQRUG 4\ndate: '2020-04-20'\ncategories: meeting\n---\n\n\n\n\n\n### 2020-04-20: UQRUG 4 - moving online!\n\nBecause of physical isolation, we will be meeting online for now.\n\nJoin the zoom meeting at 3 pm on Monday the 20th of April\n\n\n#### Attendees\n\nPlease add your **name and a problem you'd like to work on**, or just something you'd like to chat about! Feel free to add links too, so others can have a look and contribute.\n\n* [Steph](https://mastodon.indie.host/@stragu/) (Library) - putting together a resource for learning reproducible reports with R Markdown.\n* **Greg** - working on my PhD thesis using RMarkdown (I have converted the UQ thesis template to RMarkdown). Also working on some data analysis which involves manipulating data contained in multiple files. Lots of dplyr code.  Note: R 4.0 coming this week. This is a major release and it involves reinstalling all of your packages. Be careful if you update and make sure you keep backups.\n* **Patrick** - Honours student in agriculture using R to analyse biomass of lettuce and genetic variations of weed species. \n* **Aljay** - Working in  fruit/vegetable quality changes in supply chains and using R to predict changes in the chain.\n* **Fathiyya** - Currently I am working in remote sensing field for group of crops classification using R\n*  **Paula** - I'm here to help with questions.\n*  **Amelia** - Hello! I am a basic learner of R. I will start plotting some graphs, and if I have some questions I will let you know.\n*  **Debbie** - Postdoc at SEES using R for catchment restoration projects.\nWe can create breakout rooms in Zoom for people to help each other.\n\n\n#### Topics discussed\n\n* **R 4.0** released in a few days. Find out more:\n    * https://developer.r-project.org/Blog/public/\n    * https://cran.r-project.org/doc/manuals/r-devel/NEWS.html\n* **dplyr** soon to hit 1.0 release, planned for around the end of May. Details about changes are on the Tidyverse blog, in a series of posts:\n    * https://www.tidyverse.org/categories/package/\n* **R Markdown UQ thesis template** by Greg: https://github.com/gsiemon/UQThesis\n    * Manage citations https://ropensci.org/technotes/2020/05/07/rmd-citations/\n* **Bookdown** for bigger, structured R Markdown documents: https://bookdown.org/\n* **Tidying** data with Tidyverse functions\n* **Iterating** over several vectors of values\n    * useful examples:\n        * https://github.com/jennybc/row-oriented-workflows/blob/master/ex06_runif-via-pmap.md\n        * https://github.com/jennybc/row-oriented-workflows/blob/master/iterate-over-rows.md\n        * https://serialmentor.com/blog/2016/6/13/reading-and-combining-many-tidy-data-files-in-R\n        * https://gitlab.com/stragu/DSH/-/blob/master/R/packaging/packaging.md#read-a-single-file\n\nThe code we worked on:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# construct dataframe containing relevant data\nsite_number <- c(1, 2) # there are 2 numbers for this variable (1 and 2)\nyear <- c(2001, 2002) # there are 2 years (2001, 2002) \nveg_index <- c(\"EVI\", \"EVI2\") # there are 2 VegIndices (EVI, EVI2)\n# put everything together\ndf <- data.frame(site_number, year, veg_index)\n\n# find all combinations of values\nlibrary(tidyr)\nexpanded <- expand(df, site_number, year, veg_index)\n\n# create a path from other variables\nlibrary(dplyr)\nwith_paths <- expanded %>% \n  mutate(path = paste0(\"beginning/\", site_number, \"_\", year, \"-\", veg_index))\n\n# encapsulate code into a function\ndo_stats <- function(df, numCores) {\n  siteShp <- readRDS(df$path)\n  calcPixelwiseStats(siteShp, Year = df$year, removeBadGrads = removeBadGrads, optionsYldIdx = setOptionsYldIdx(minevitrees = 999, ndaysbeforemax4yldidx = 60, ndaysaftermax4yldidx = 60, VegIndex = df$veg_index), numCores = numCores, getFromBricks = FALSE)\n}\n\n# apply the custom function on 1-row tibbles by splitting\nlibrary(purrr)\nsiteInfoAllYrs <- with_paths %>% \n  split(1:nrow(with_paths)) %>% # create sequence as long as number of rows\n  map(do_stats, numCores = 4)\n# we end up with a list of results\n\n# Other option: with pmap, which will work row-wise\n# (which is why we have to have the df variables in the right order)\ndo_stats2 <- function(site_number, year, veg_index, path, numCores) {\n  siteShp <- readRDS(path)\n  calcPixelwiseStats(siteShp, Year = year, removeBadGrads = removeBadGrads, optionsYldIdx = setOptionsYldIdx(minevitrees = 999, ndaysbeforemax4yldidx = 60, ndaysaftermax4yldidx = 60, VegIndex = veg_index), numCores = numCores, getFromBricks = FALSE)\n}\n\n# apply the function row-wise\nsiteInfoAllYrs <- pmap(with_paths, do_stats2, numCore = 4)\n\n# small example of how pmap works row-wise:\nx <- c(1, 10, 100)\ny <- c(1, 2, 3)\nz <- c(5, 50, 500)\nexamp <- data.frame(x, y, z)\npmap(examp, sum)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}