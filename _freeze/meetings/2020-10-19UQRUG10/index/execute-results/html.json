{
  "hash": "1db8496edb5185b5475c74a472736d76",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: UQRUG 10\ndate: '2020-10-19'\ncategories: meeting\n---\n\n\n\n\n\n### 2020-10-19: UQRUG 10\n\n#### Attendees and problems\n\nPlease add your name and the problem you'd like some help with!\n\n* **StÃ©phane** (Library): here to help! \n* **Chantelle**: Biological Sciences. I can't stay to long as I have to go track carpet pythons at 4pm ;)\n* **Einat** (Social Sciences, R studio beginner): Apologies in advance would have to leave early. have some issues wiTh minor and basic procedures, like ...CONDITIONS!! and also with reading labels from csv/excel file. \n* **Patrick** (Agricultural Science) Honours student\n* **Gabriel**: Hydrologist, spatial data analyst. PhD candidate at SMI. R beginner and Python enthusiast !\n* **Natalie** (Mathematics): Undergraduate Mathematics and Statistics student\n* **Phoebe**: learn more about data viz!\n* ... and few more!\n\n\n#### Today's challenge\n\nTry playing with the latest TidyTuesday dataset: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-10-13/readme.md\n\nShare your findings and cool visualisations with the group!\n\n\n#### Recoding data\n\nThis is a working example of recoding using dplyr's `case_when()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nCO2 %>% \n  mutate(uptake = case_when(\n    uptake > 12 ~ \"yay!\",\n    uptake > 10 ~ \"OK.\",\n    TRUE ~ \"oh no...\"\n  ))\n```\n:::\n\n\n\nThe `TRUE` line is for \"everything else\".\n\n\n#### Finding files\n\nThe \"working directory\" is the default location:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() # know where you are\nsetwd(\"path/to/correct/location\") # change it\n\n# functions will look there by default\nread.csv(\"filename.csv\")\n# but you can use longer, absolute filepaths\nread.csv(\"C:/Users/myname/filename.csv\")\n```\n:::\n\n\n\nIf you don't want to deal with that: **use R Projects**! Creating an R Project will set the working directory for you.\n\n\n#### Dealing with overflowing labels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(diamonds, aes(x = cut)) +\n  geom_bar()\n\n# horizontal bar chart\nggplot(diamonds, aes(y = cut)) +\n  geom_bar()\n\n# abbreviate the labels\nabbreviate(diamonds$cut)\n\n# using it in the visualisation is nice and concise\nggplot(diamonds, aes(x = cut)) +\n  geom_bar() +\n  scale_x_discrete(labels = abbreviate)\n```\n:::\n\n\n\nOn the other hand, if labels are overflowing inside the canvas, we can expand axis limits:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# expand limits\nggplot(diamonds, aes(x = cut)) +\n  geom_bar() +\n  ylim(c(0, 25000))\n```\n:::\n\n\n\nHowever, ggplot2 should expand the plot area to include all the geometries automatically, including a `geom_label()` or `geom_text()`.\n\n\n#### Shared resources\n\nResources shared during the meetup can be listed here:\n\n* Packages:\n    * epiDisplay: https://rdrr.io/cran/epiDisplay/\n    * lme4: https://www.rdocumentation.org/packages/lme4/versions/1.1-23/topics/lme4-package\n    * Seurat: https://cran.r-project.org/web/packages/Seurat/index.html\n    * reshape2: https://cran.r-project.org/web/packages/reshape2/index.html\n* Functions:\n    * `case_when()` to recode a variable: https://dplyr.tidyverse.org/reference/case_when.html\n* Data viz:\n    * ggplot2 extensions: https://exts.ggplot2.tidyverse.org/gallery/\n    * Data to Viz: https://www.data-to-viz.com/\n    * lattice: https://www.rdocumentation.org/packages/lattice/versions/0.20-41\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}