{
  "hash": "2ac67c56f42decc8b6a5008016ba80e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: UQRUG 42\ndate: '2023-09-27'\ndescription: '**Overview**: Parallization in R. <br /> **Questions**: parallels, HPC, memory utilisation, detectCores, for loops'\ncategories: meeting\ntoc: true\ntoc-depth: 5\n---\n\n\n\n\n\n## 2023-09-27: UQRUG 42\n\n### R Overview of the Month\n\nThis month at UQRUG, [Ra√∫l](https://scholar.google.com/citations?hl=en&user=jHBYsW0AAAAJ&view_op=list_works&sortby=pubdate) will be providing an overview of using, and the advantages of, Parallelization in R.\n\nFind more details here: [https://uqrug.netlify.app/posts/2023-09-27-september-parallelisation/](https://uqrug.netlify.app/posts/2023-09-27-september-parallelisation/)\n\n### Attendees\n\nAdd your name, where you're from, and why you're here:\n\n| Name                    | Where are you from?          | What brings you here?                                 |\n|------------------------|------------------------|------------------------|\n| Nicholas Wiggins        | Library                      | Here to help!                                         |\n| Raul Riesco             | ACE                          | Here to learn and help :)                             |\n| David Green             | UQ Research Computing Centre | R on HPC help                                         |\n| Raimundo Sanchez        | Research Fellow SHRS         | R                                                     |\n| Giulio Centorame        | IMB                          | Parallel computation hurts my brain                   |\n| Jessica Hintzsche       | QAAFI                        | Here to figure out how to make my code more efficient |\n| Felicity Charles        | UQ Gatton                    | Here to learn                                         |\n| Grant Taylor            | UQ St Lucia                  | Learn more about R                                    |\n| Ryan                    | SOE                          | Learn R                                               |\n| Jocelyn                 | UQCCR                        | Still learning                                        |\n| Valentina Urrutia Guada | Library                      | Here to learn & help                                  |\n| Luke Gaiter             | Library                      | Learning                                              |\n\n### Questions\n\n#### Q1 - How do you avoid running out of memory with parallel jobs? - Giulio Centorame\n\nI constantly have issues with running out of memory with parallel operations. E.g. using the package [`furrr`](https://furrr.futureverse.org/)\n\n``` r         \n# Setup multisession\nlibrary(furrr)\nlibrary(magrittr)\nplan(multisession, workers = 2)\n\n# Vector of paths with huge tables I want to import\npaths <- c(\"big_table1.tsv\", \"big_table2.tsv\", \"big_table3.tsv\")\n\n# Load everything\n# If the tables are too big, R runs out of memory\npaths %>%\n    future_map(read.table)\n```\n\nThis can cause issue especially when using HPCs, since the jobs will often fail if the process tries to allocate more memory than requested. How do I limit the amount of memory each child process/all the processes can use?\n\n**Answers**\n\n-   David: The UQ HPCs can allocate up to 2TB of RAM. If you need more RAM, request it. If you are still running out of RAM, then it might be worth splitting the job into multiple separate jobs. e.g. if you're trying to process the three big tables, then run each big table in a separate job\n-   Name: Ryan I don't think you have control over the memory of each child process. You might want to use data.table from previous presentations here. It uses openmp for parallization and could be more efficient. I also believe the HPC has openmp all set, so in R, it should be plug and play already. ---\n\n---\n\n#### Q2 - Using detectCores() will detect all cores on a HPC is there a workaround? - David\n\n**Answers**\n\n-   Ryan: Maybe...\n\n``` r         \ncores = Sys.getenv(\"SLURM_CPU_PER_TASK\")\nmakecluster(cores)\n```\n\nThis does a more refine version of the above, but requires an extra package, so not as good for HPC use\n\n``` r         \ncores <- length(parallelly::availableWorkers())\n```\n\n------------------------------------------------------------------------\n\n#### Q3 - for loops - Grant Taylor\n\nI have the same code for six participants. Made six lots of code, but of course this is very inefficient. Here is a small part...\n\n``` r         \n#######################   SUB 004   ############################################\n#library(tidyverse)\n\nload(\"0_data/parsedData_cogPsyRep_sub_004.RData\")   #  contains a list called \"data\" which is converted into a dataframe for the Sub (see next line)\n\ndf4=data.frame(data)\n\nnTrialsAll=length(df4$Cond1)\nnTrialsAll\n\nMRT=median(df4$Time1)\nMRT\nprobCorr=mean(df4$Correct==TRUE)\nprobCorr\n\nnumDR4=sum(df4$DoubleResp==TRUE)\nnumDR4\nprobDR4=(sum(df4$DoubleResp==TRUE)/nrow(df4))\nprobDR4\n\n\nACCdf4=tapply(df4$Correct==TRUE, list(df4$Cond1, df4$Cond2),mean)\nACCdf4\n\n\nRTdf4=tapply(df4$Time1, list(df4$Cond1, df4$Cond2),median)\nRTdf4\n```\n\nSounds good. Anything that is more efficient.\\\nYes, this example is for sub 4 but I have S=c(1,2,3,4,6,9) \\# the Sub numbers I tried something like this...\n\n``` r         \nfor (s in S)\n{load(paste(\"0_data/parsedData_cogPsyRep_sub_00\",s,\".RData\",sep=\"\"))\n}  ## loads the data for a specific Sub\n```\n\nThis particular one probably doesn't need it (paralellisation) Thanks! I'll give that a go :)\n\n**Answers**\n\n-   Raul:\n\n``` r         \nlist_files <- list.files(path = \"./0_data\", pattern = \"parsedData_cogPsyRep_sub\")\nfor (file in list_files){\n  a<-data.frame(file)\n  return(length(a$Cond1))\n  return(median(a$Time1))\n}\n```\n\n-   Nick: If you have any further issues or questions, don't hesitate to reach out to training\\@library.uq.edu.au\n\n------------------------------------------------------------------------\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}