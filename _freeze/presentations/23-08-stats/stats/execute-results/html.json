{
  "hash": "c288cf429a739da0e7db092fbbf60e3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    theme: dark\n    controls: true\n---\n\n\n\n# Basic Statistics\n\n::: columns\n::: {.column width=\"60%\"}\n</br>\n\nAn overview of basic statistics in R\n\nBy: Valentina Urrutia Guada for [UQRUG](/)\n:::\n\n::: {.column width=\"40%\"}\n![](img/Rlogo.svg)\n:::\n:::\n\n\n## Basic Statistics\n\nThis is simply a presentational form of the code shown during the August UQRUG.\n\n::: footer\n<a href=\"/presentations/23-08-stats/stats.html\" target=\"_blank\">Click for the external link to these slides</a>\n:::\n\n## Load the libraries and data\n```{.r}\n#Packages and libraries\nlibrary(tidyverse)\nlibrary(lattice)\n\n#Loading data\ndata1<-mtcars\ndata2<-read.csv(\"datasets/ttest.csv\")\ndata3<-read.csv(\"datasets/ANOVA.csv\")\ndata4<-read.csv(\"datasets/correl.csv\")\n\n#Creating objects\nY<-mtcars$mpg\nX<-mtcars$wt\n```\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Explore the data structure\n```{.r}\n#Basic exploration of data\nView(data1)\nstr(data1)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n\n\n:::\n:::\n\n\n\n## Descriptive statistics\n\nThe summary() function provides quick and easy descriptive statistics, and is useful initial step:\n```{.r}\nsummary(data1)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n\n\n:::\n:::\n\n\n\n## Visualise the data\nWith histogram() we can quickly view the descriptive stats plots per variable\n\n```{.r}\nhistogram(Y) # the same as histogram(data$Y) or histogram(~Y,data)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](stats_files/figure-revealjs/Visualise the data-1.png){width=960}\n:::\n:::\n\n\n\n## Visualise the data\n\nBox and whisker plots are another useful way to visualise our data spread quickly and easily with bwplot()\n```{.r}\nbwplot(Y)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](stats_files/figure-revealjs/Box and Whisker Plot-1.png){width=960}\n:::\n:::\n\n\n\n## Inferential statistics\nThe classic two sample t-test can easily be run with the t.test() function\n\n```{.r}\n#two sample t-test\nt.test(time~daytime,data2)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  time by daytime\nt = -6.8311, df = 77.776, p-value = 1.667e-09\nalternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0\n95 percent confidence interval:\n -48.78467 -26.76533\nsample estimates:\nmean in group 1 mean in group 2 \n        967.900        1005.675 \n```\n\n\n:::\n:::\n\n\n\n## ANOVA visualisation\nBefore we run the ANOVA test, it can be a good idea to visualise our data with a boxplot, which ggplot2 also has\n```{.r}\n#ANOVA aov(Y ~ X, data)\nggplot(data3)+\n  aes(mode, students, group = mode)+\n  geom_boxplot()\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](stats_files/figure-revealjs/Visualise ANOVA-1.png){width=960}\n:::\n:::\n\n\n\n\n## ANOVA \nAn ANOVA is a good test to determine if the means of multiple independent variables are equal\n```{.r}\nsummary(aov(students~mode,data=data3))\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n            Df Sum Sq  Mean Sq F value Pr(>F)  \nmode         1 0.0191 0.019093   2.953 0.0889 .\nResiduals   97 0.6272 0.006466                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n## Correlation\n\nBefore running a corrlelation test, it is good to visualise the relationship of the data with a simple scatterplot such as the lattice xyplot()\n```{.r}\n#Relationship\n#Scatterplot\nxyplot(FXRUSD~FXREUR,data4)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](stats_files/figure-revealjs/Visualise Relational Data-1.png){width=960}\n:::\n:::\n\n\n\n## Correlation\nWe can now test for correlation using a Pearson or Spearman test\n```{.r}\n#correlation (Pearson)\ncor(data4$FXRUSD,data4$FXREUR,method=\"pearson\")\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.933557\n```\n\n\n:::\n:::\n\n\n```{.r}\n#correlation (Spearman)\ncor(data4$FXRUSD,data4$FXREUR,method=\"spearman\")\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.872435\n```\n\n\n:::\n:::\n\n\n\n\n\n## Linear Regression\n```{.r}\n#linear regression\nlm(FXRUSD~FXREUR,data4)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = FXRUSD ~ FXREUR, data = data4)\n\nCoefficients:\n(Intercept)       FXREUR  \n     -0.190        1.662  \n```\n\n\n:::\n:::\n",
    "supporting": [
      "stats_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}