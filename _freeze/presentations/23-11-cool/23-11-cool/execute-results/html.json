{
  "hash": "e9ea15ee15cc50a429edb8a99b3943af",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"UQRUG Presents: Cool But Useless\"\nformat: revealjs\neditor: visual\n---\n\n\n\n\n\n## Cool But Useless\n\n::: columns\n::: {.column .fragment width=\"60%\"}\nThis month we're going to play with some more entertaining R packages, which can hopefully make the learning process a bit more interesting.\n:::\n\n::: {.column .fragment width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23-11-cool_files/figure-revealjs/dogs-1.png){width=1920}\n:::\n:::\n\n\n:::\n:::\n\n## How can I find fun R packages?\n\nThere are a few good articles online, and you stumble across the odd one, but today we're going to explore [Cool but Useless](https://github.com/coolbutuseless)!\n\n![](img/cbu.png)\n\n## ggdogs\n\n::: fragment\nEver wanted to replace the points in your ggplot with dogs?\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23-11-cool_files/figure-revealjs/dog points-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## ggcats\n\n::: fragment\nWhat about cats?\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23-11-cool_files/figure-revealjs/cat points-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## ggbernie\n\n::: fragment\nOr Bernie Sanders?\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23-11-cool_files/figure-revealjs/bernie points-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## geom_label\n\n::: fragment\nYou can play with adding labels to make things more interesting too.\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23-11-cool_files/figure-revealjs/dog change-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## gganimate\n\n::: fragment\n::: panel-tabset\n### Animated Cats\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/cat_animation.gif)\n:::\n:::\n\n\n\n### The Code\n\n``` r\n# Packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(gganimate)\nlibrary(ggcats)\n\n# A function to generate a data frame with simulated data and cats\ndata_cat <- function(from = 0, to = 80, by = 1, fun = rnorm, \n                     cat = \"\", sd = 3, category = \"\") {\n  tibble(\n    x = seq(from, to, by),\n    y = fun(x) + rnorm(length(x), sd = sd),\n    category = rep(category, length(x)),\n    cat = rep(cat, length(x))\n  )\n}\n\n\n# Data for my focus\nconcentration <- data_cat(\n  fun = function(x) 4 * sin(1.5 * x) + 4, \n  cat = \"lil_bub\", \n  sd = 1, category = \"focus\"\n)\n\n# Data for my duties\nset.seed(10)\n\nduties <- data_cat(\n  fun = function(x) 5 + 1.5 * exp(x / 20), \n  cat = \"pusheen_pc\", \n  sd = 2, category = \"duties\"\n)\n\n# Data for my anxiety\nanxiety <- data_cat(\n  fun = function(x) 10 + exp(x / 15) + 4 * sin(x), \n  cat = \"nyancat\", \n  sd = 1, category = \"anxiety\"\n)\n\n# Complete data\nfull_data <- rbind(concentration, duties, anxiety)\n\n\nggplot(full_data, aes(x, y)) +\n  geom_line(aes(color = category), size = 1) +\n  geom_cat(aes(cat = cat), size = 4) +\n  labs(\n    y = element_blank(),\n    x = \"Time\",\n    caption = \"Graph by JPCH. Generated with `ggplot2`, `ggcats` and `gganimate`\",\n  ) +\n  scale_color_manual(\n    values = c(\"#EE2C2C\", \"#FF8C00\", \"#68228B\"),\n    labels = c(\"Anxiety\", \"My focus\", \"Duties\")) +\n  theme_fivethirtyeight() +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(size = 12, color = \"black\"),\n    axis.title.x = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 14, face = \"bold\"),\n    legend.position = \"top\",\n    legend.title = element_blank()\n  ) +\n  transition_reveal(x)\n```\n:::\n:::\n\n## beepr\n\nThis package will play a sound.\n\n``` r\n# install.packages(\"beepr\")\nlibrary(beepr)\nbeep(1)\nbeep(2)\n```\n\nI actually use this at the end of a long piece of code so I know when it's done. But I have a useless example on the next slide\n\n## \n\n``` r\nrepeat{\n  # statement to be executed multiple times\n  print(format(as.POSIXct(Sys.time()), format = '%I:%M %p'))\n  # checking the stop condition\n  if (format(as.POSIXct(Sys.time()), format = '%M') == \"22\")\n  {\n    for (i in 1: format(as.POSIXct(Sys.time()), format = '%I')) {\n      beep(1)\n      Sys.sleep(1)\n    }\n    # using break statement\n    # to terminate the loop\n    break\n  }\n  \n  \n  # incrementing the iteration variable\n  Sys.sleep(60-as.numeric(format(as.POSIXct(Sys.time()), format = '%OS')))\n  \n  \n}\n```\n\n## Carelesswhisper\n\n::: fragment\nNo, not Wham! It's a a lightweight (only 70mb!) voice recording and transcription package. I'll have to leave the presentation to show you this in R.\n:::\n\n::: fragment\n\"But that's not useless, Nick!\"\n:::\n\n::: fragment\nJust you wait\n:::\n\n::: fragment\n``` r\n# install.package('remotes')\nremotes::install_github('coolbutuseless/carelesswhisper')\n\nlibrary(carelesswhisper)\n\n# Initialise whisper with built-in model (tiny, multi-language)\nctx <- whisper_init()\n\n# Record 5 seconds of audio and perform speech recognition\nsnd <- record_audio(5)\n\n# Transcribe the recorded audio\nsnd_text <- whisper(ctx, snd)\nsnd_text\n\n# play it back\naudio::play(snd, rate = 16100)\n\n# export and import the audio file\nsaveRDS(snd, file = \"my_recording.rds\")\nrecording <- readRDS(file = \"my_recording.rds\")\n```\n:::\n\n## Cowsay\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n ----- \nCowsay will create an ascii creature saying what you want it to \n ------ \n    \\   \n     \\\n         _\n       _/ }\n      `>' \\\n      `|   \\\n       |   /'-.     .-.\n        \\'     ';`--' .'\n         \\'.    `'-./\n          '.`-..-;`\n            `;-..'\n            _| _|\n            /` /` [nosig]\n  \n```\n\n\n:::\n:::\n\n\n\n## Cowsay + Carelesswhisper\n\n``` r\naudio::play(snd, rate = 30100)\nsay(snd_text, \"random\")\n```\n\n## rsoundfont\n\nWant to play musical instruments with R?\n\n``` r\n# install.package('remotes')\nremotes::install_github('coolbutuseless/rsoundfont')\n\nlibrary(rsoundfont)\n\n# Source: https://www.philscomputerlab.com/general-midi-and-soundfonts.html\nfilename <- \"C:/Users/uqnwiggi/OneDrive - The University of Queensland/TechTraining/RUG/cool_but_useless/soundfonts/weedsgm4_update.sf2\"\n\nsf <- read_sf2(filename)\n\n# sample a loop from an instrument\nsamp <- create_sample(sf, \"Mandolin Trem E5\" , 1)\nprint(inst)\naudio::play(samp)\n\n\n# play a bunch of sounds\naudio::play(create_sample(sf, \"KBJ100 Banjo G3\" , 2))  \nSys.sleep(0.45)\naudio::play(create_sample(sf, \"KBJ100 Banjo G3\" , 1))\nSys.sleep(0.3)\naudio::play(create_sample(sf, \"KBJ100 Banjo F3\" , 1))\nSys.sleep(0.15)\naudio::play(create_sample(sf, \"KBJ100 Banjo E3\" , 1))\nSys.sleep(0.3)\naudio::play(create_sample(sf, \"KBJ100 Banjo G3\" , 1))\nSys.sleep(0.15)\naudio::play(create_sample(sf, \"KBJ100 Banjo C4\" , 1))\nSys.sleep(0.3)\naudio::play(create_sample(sf, \"KBJ100 Banjo D4\" , 1))\nSys.sleep(0.5)\naudio::play(create_sample(sf, \"KBJ100 Banjo E4\" , 1))\nSys.sleep(.9)\naudio::play(create_sample(sf, \"KBJ100 Banjo C4\" , 1))\n```\n\n## Wordle\n\nWant to play Wordle in R?\n\n``` r\n# install.packages('remotes')\nremotes::install_github('coolbutuseless/wordle')\n\nlibrary(wordle)\n\nplay_wordle()\n```\n\n## UQRUG Cool but Useless Competition\n\n::: incremental\n-   We will have the December UQRUG on December 6th.\n-   At that RUG, I want to see the most creative Useless R Packages and Code compilations that you can find and create!\n-   Perhaps a hilarious use of an R package\n-   Maybe you can chain together an entertaining string of functions to rival my carelesswhisper cowsay\n:::\n\n## UQRUG Cool but Useless Competition\n\n::: incremental\n-   The winner will be chosen by those attending the next UQRUG\n-   They will not only receive the honourable title of \"Coolest and Most Useless\", but also the UQRUG Rug!\n-   All other entrants will receive a prize too!\n:::\n",
    "supporting": [
      "23-11-cool_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}