{
  "hash": "5f46c93693360b4563d81e4cc21adb88",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"From Laptop to HPC\"\nauthor: \"Dr David Green, UQ Research Computing Centre\"\ndate: \"2024-08-20\"\noutput: \n  html_document:\n    toc: true\n    toc-location: left\n    theme:\n      bslib: true\n      bootswatch: minty\n      bg: \"#f0f0f0\"\n      fg: \"#000000\"\n---\n\n\n\n<!-- https://bootswatch.com/ --> <!-- bootswatch:  default _minty_  celurean solar cyborg  quartz  zephyr   -->\n\n\n\n\n\n\n\n## Abstract\n\nIn this session, we will trace the steps taken by the many UQ researchers using R who have wanted, or needed, stronger (or more numerous) computers on which to run their codes.\n\nThere are tremendous benefits to porting your R computations to the high-performance computing (HPC) environment.\n\nBut there are also some obstacles to overcome, especially with the ease of use and there are a few gotchas.\n\nSome recent innovations on the Bunya HPC system are addressing some of those obstacles.\n\n## Outline\n\n-   So you've got some R code running on your laptop and you've hit limits?\n-   HPC 101\n-   Implications for your code\n-   R on Bunya\n-   Access Modes\n-   Parameter Sweeps\n\n### Your R code\n\nImagine the scenario where your R code\n\n-   Is showing promise,\n-   Needs to be run more extensively,\n-   Is already hitting limits when running on your laptop.\n\n### Laptop limitations\n\n-   Code could run faster with more cores,\n-   Insufficient RAM,\n-   Disk space is small,\n-   The laptop is unusable for other work,\n-   Smoke comes out when it's running your code ;-)\n\n### Enter Bunya, for comparison\n\n|                       |     This Laptop     |     Bunya Phase 1     |     Bunya Phase 2     | Bunya Phase 3 soon |\n|:----------------------|:-------------------:|:---------------------:|:---------------------:|--------------------|\n| CPU                   | Intel Core i7-8650U | AMD EPYC 7643 (Milan) | AMD EPYC 9454 (Genoa) |                    |\n| Speed                 |      2.11 GHz       |       2.30 GHz        |       2.75 GHz        |                    |\n| Sockets               |          1          |           2           |           2           |                    |\n| Cores                 |          4          |          96           |          96           |                    |\n| Logical Processors    |          8          |          192          |          192          |                    |\n| RAM                   |        16 GB        |        2.0 TB         |        1.5 TB         |                    |\n| Number of Devices     |     1 (usually)     |          60           |          33           |                    |\n| Total number of cores |          4          |         5760          |         3168          |                    |\n\n#### And that's not all of Bunya !!\n\n-   Some Bunya nodes have 4TB.\n-   Several other Phase 2 nodes have state-of-art GPU computing capabilities.\n-   R has limited support for GPU\n-   See [gpuMatrix](https://cran.r-project.org/web/packages/GPUmatrix/index.html) package, for example.\n\n### HPC 101\n\n-   HPCs are built for speed, not for comfort !\n-   HPCs are almost always a command line linux platform.\n-   HPCs are almost always batch mode environments.\n-   Job scripts are created and submitted to the batch system.\n-   Jobs need to be able to run \"with the lights out\".\n-   Jobs need to be able to run without user intervention.\n-   Many HPCs (including Bunya) support interactive use via the batch system.\n-   Some HPCs (including Bunya) have graphical capabilities for user access.\n-   Some HPCs (not Bunya) are based on the Windows operating system.\n\n#### Structure of Bunya HPC\n\n![Schematic of a HPC Cluster](https://github.com/UQ-RCC/hpc-docs/blob/main/media/HPC_Cluster_Schematic.png?raw=true)\n\n#### The vast majority of work on HPCs is done via a batch system\n\n```         \n#There are this many jobs running\n[davidg@bunya1 ~]$ squeue | grep \" R \" | wc -l\n801\n\n#and this many are queued\n[davidg@bunya1 ~]$ squeue | grep \" PD \" | wc -l\n470\n```\n\nWe often want to know how busy Bunya is. The `sinfo` command tells us the state of all the nodes in a partition.\n\n```         \n[davidg@bunya1 ~]$ sinfo -p general\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ngeneral      up 14-00:00:0      1  down$ bun009\ngeneral      up 14-00:00:0      1  drain bun023\ngeneral      up 14-00:00:0     39    mix bun[008,010-011,026,034,045-050,060,062,083-086,088,090,092-095,097,099-105,108-115]\ngeneral      up 14-00:00:0     54  alloc bun[006-007,012-022,024-025,027-033,035-044,051-059,061,063-067,087,089,091,096,098,106-107]\n\n\n[davidg@bunya1 ~]$ sinfo -p gpu_cuda\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ngpu_cuda     up 7-00:00:00      1  down$ bun003\ngpu_cuda     up 7-00:00:00     16    mix bun[004-005,068,071-082,116]\n```\n\nThe node states will usually be one of\n\n-   idle (no jobs),\n-   mix (mixed, some space left for new jobs),\n-   alloc (fully allocated),\n-   drain (emptying, usually for maintenance),\n-   down (faulty or down for maintenance)\n\n#### There is the possibility of interactive use BUT ...\n\nInteractive use *must* still be mediated by the batch system to fairly share the resources.\n\nThis ensures that the computation takes place on a compute nodes.\n\nInstalling R packages must *not* be done on the login nodes. Getting in early ;-)\n\nInteractive graphical usage of R can be achieved using\n\n-   interactive command line jobs with X11 forwarding enabled\n-   Bunya-on-demand via a web browser\n\nSo, yes, you can run RStudio. Indeed, *two* ways!\n\n### The implications for your R code\n\nSome of the benefits of moving to HPC are access to potentially\n\n-   thousands of CPU cores,\n-   terabytes of RAM,\n-   fast temporary disk for large data sets,\n-   ease of use of RDM storage for archiving data.\n\nSome of the challenges:\n\n-   managing your source code across platforms\n-   modifications for locations\n-   locating R software and pre-built libraries\n-   handling the different CPU architectures\n-   letting go of the notion of an all encompassing R script\n\n### Using R on Bunya\n\n-   There is a great deal of software installed on Bunya.\n-   You just need to be able to find it!\n-   Environment modules (based on lmod) does all the \"dirty work\".\n-   You can activate/deactivate access to installed software.\n-   The central installations of R will have LOTS of \"extensions\" (R packages).\n-   If you need some exotic R package, you are able to install it yourself.\n\n#### How to activate R in your session\n\n```         \n[uqdgree5@bun048 R]$ module purge\n\n[uqdgree5@bun048 R]$ module load r/4.3.3-gfbf-2023a\n\n[uqdgree5@bun048 R]$ which Rscript\n/sw/auto/rocky8c/epyc3/software/R/4.3.3-gfbf-2023a/bin/Rscript\n\n[uqdgree5@bun048 R]$ cat demo.R\n1+1\n2+2\n[uqdgree5@bun048 R]$\n\n[uqdgree5@bun048 R]$ Rscript demo.R\n[1] 2\n[1] 4\n```\n\n#### Where is it going to search for R packages?\n\n```         \n[uqdgree5@bun048 R]$ module purge\n\n[uqdgree5@bun048 R]$ module load r/4.2.1-foss-2022a\n\n[uqdgree5@bun048 R]$ which R\n/sw/auto/rocky8c/epyc3/software/R/4.2.1-foss-2022a/bin/R\n\n[uqdgree5@bun048 R]$ R\n\nR version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Previously saved workspace restored]\n\n> .libPaths()\n[1] \"/home/uqdgree5/R/x86_64-pc-linux-gnu-library/4.2\"\n[2] \"/sw/auto/rocky8c/epyc3/software/R/4.2.1-foss-2022a/lib64/R/library\"\n> q()\nSave workspace image? [y/n/c]: n\n```\n\n#### Remember mention of EPYC3 and EPYC4 CPUs ?\n\n-   You can build additional R packages if you need them.\n-   They install into your `R` folder in your home directory.\n-   An R package built on an EPYC3 node will work on EPYC3 and EPYC4.\n-   An R package built on an EPYC4 node will only work on EPYC4.\n\n#### You don't need to re-build any of the following packages\n\n-   They have been built separately on EPYC3 and EPC4 nodes.\n-   It will save you disk quota and time if you don't re-build them.\n-   Be careful *not* to reset your `.libPaths()` and ignore these.\n-   There are almost 1200 popular R packages pre-installed with the R Version 4.2.1 installation on Bunya.\n\n```         \n[davidg@bunya1 ~]$ ls /sw/auto/rocky8c/epyc3/software/R/4.2.1-foss-2022a/lib64/R/library\nabc                   doMC                ineq                      parallelly          scatterplot3d\nabc.data              doParallel          influenceR                parallelMap         scs\nabe                   doRNG               infotheo                  ParamHelpers        sctransform\nabind                 doSNOW              ini                       parsedate           SDMTools\nacepack               dotCall64           inline                    party               seewave\nadabag                downloader          intergraph                partykit            segmented\nade4                  dplyr               interpretR                pastecs             selectr\nADGofTest             dr                  intrinsicDimension        patchwork           sem\nadmisc                drgee               inum                      pbapply             semPLS\naggregation           DRR                 ipred                     pbivnorm            semTools\nAICcmodavg            drugCombo           irace                     pbkrtest            sendmailR\n```\n\n```         \n<SNIP>                <SNIP>              <SNIP>                    <SNIP>              <SNIP>\n```\n\n```         \ndismo                 HWxtest             origami                   Rvmmin              xtable\ndistillery            hypergeo            orthopolynom              RWeka               xts\ndistr                 ica                 osqp                      RWekajars           yaImpute\ndistrEx               IDPmisc             outliers                  s2                  yaml\ndistributional        idr                 packrat                   sampling            yulab.utils\nDistributionUtils     ids                 pacman                    sandwich            zeallot\ndiveRsity             ie2misc             pammtools                 sass                zip\ndlm                   igraph              pamr                      SBdecomp            zoo\nDMCfun                image.binarization  pan                       scales\ndoc2vec               imager              parallel                  scam\ndocstring             imagerExtra         parallelDist              scatterpie\n[davidg@bunya1 ~]$\n```\n\n### Access Methods for R\n\n#### Command line interactive batch job\n\n-   As shown earlier\n-   Command line based\n-   Can be used to launch interactive applications\n-   Key steps\n    -   Login to the login node\n    -   `salloc ... srun` resource request and run shell\n    -   `module load ...` activate software\n    -   use software\n\n#### Regular batch jobs\n\n-   Create R scripts that are suitable for use on Bunya\n-   Create a [batch job script file](https://github.com/UQ-RCC/hpc-docs/blob/main/guides/Bunya-User-Guide.md#slurm-scripts) that will run the job\n-   `sbatch jobScriptFile`\n\n#### Bunya-on-Demand\n\n-   Graphical user interface access to Bunya\n-   Accessed via web browser\n-   Select applications from the menus, or\n-   Launch a terminal window\n    -   `module load ...` to activate the software\n    -   start the software\n    -   [how it looks for RStudio](https://github.com/UQ-RCC/hpc-docs/blob/main/guides/OnDemand-Guide.md#rstudio)\n\n------------------------------------------------------------------------\n\n### Parameter Sweeps\n\n-   Often R code is used as part of a parameter sweep study\n    -   Species of animal/plant/insect\n    -   Regions of the globe\n    -   Seasons of the year\n    -   Climate scenarios of the future\n    -   *even* crocodile ID numbers!\n\n```         \n#How parameter sweeps get big quickly ... 1,000,000 combinations\nfor (i in 0:999){\n  for (j in 0:99){\n    for (k in 0:9){\n      do_something(i,j,k)\n    }\n  }\n}\n```\n\nEven if you do this on a Bunya node, using `library(parallel)`, you can only perform 96 combinations in parallel.\n\nIt is often more effective to break it into smaller pieces and use a *high throughput computing (HTC)* approach. Simplest would look like\n\n-   strip away one of the layers of the nested for loop (e.g. i)\n-   pass i parameter values in as parameters to the R script\n-   use the `commandArgs` function to accept the value into your code\n-   for each value of i, `Rscript scriptName.R i`\n\n#### Job Arrays\n\nBunya has support for \"Job Arrays\" which make sweeping over integer parameter values straightforward.\n\nJob arrays can be adapted to sweep non-integer parameters, too.\n\nJob arrays on Bunya are limited to 1,000 elements, but you can submit more than one to the batch system.\n\n#### Nimrod\n\nUQ RCC will be adding a tool called Nimrod to Bunya later this year.\n\nThat will make it easier to sweeps over combinations of parameters that are not integers.\n\nNimrod can sweep over parameters values that are\n\n-   floating point values,\n-   sets of character strings,\n-   a list filenames found in a directory,\n-   etc.\n\n## In summary\n\n*The possibilities that arise from combining R with HPC are well worth the learning curve!*\n\n------------------------------------------------------------------------\n\n.\n",
    "supporting": [
      "Laptop2HPC_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}